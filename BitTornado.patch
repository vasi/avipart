diff -Naur bt-old/BitTornado-cvs/BitTornado/BT1/PiecePicker.py BitTornado-cvs/BitTornado/BT1/PiecePicker.py
--- bt-old/BitTornado-cvs/BitTornado/BT1/PiecePicker.py	2006-11-13 21:47:50.000000000 -0500
+++ BitTornado-cvs/BitTornado/BT1/PiecePicker.py	2007-03-08 03:18:56.000000000 -0500
@@ -1,6 +1,7 @@
 # Written by Bram Cohen
 # see LICENSE.txt for license information
 
+from pprint import pprint
 from random import randrange, shuffle
 from BitTornado.clock import clock
 try:
@@ -33,7 +34,7 @@
         self.seed_time = None
         self.superseed = False
         self.seeds_connected = 0
-        self._init_interests()
+        self._init_interests()        
 
     def _init_interests(self):
         self.interests = [[] for x in xrange(self.priority_step)]
diff -Naur bt-old/BitTornado-cvs/BitTornado/PieceSelection.py BitTornado-cvs/BitTornado/PieceSelection.py
--- bt-old/BitTornado-cvs/BitTornado/PieceSelection.py	1969-12-31 19:00:00.000000000 -0500
+++ BitTornado-cvs/BitTornado/PieceSelection.py	2007-03-08 03:18:21.000000000 -0500
@@ -0,0 +1,76 @@
+class PieceSelection(object):
+    def __init__(self, parts, totcount):
+        self.parts = parts
+        self.totcount = totcount
+        
+        include = 0
+        for i in self: include += 1
+        self.all = include == totcount
+    
+    # one_based only a
+    def from_string(cls, str, totcount, one_based = True):
+        if one_based:
+            fixup = -1
+        else:
+            fixup = 0
+        
+        parts = []
+        totcount = int(totcount)
+        for range in str.split(','):
+            try:
+                start, end = range.split('-')
+                if len(start) == 0:
+                    start = 0
+                else:
+                    start = int(start) + fixup
+                if len(end) == 0:
+                    end = totcount - 1
+                else:
+                    end = int(end) + fixup
+                parts.append(xrange(start, end + 1))
+            except ValueError:
+                if len(range) != 0:
+                    parts.append([int(range) + fixup])
+        
+        parts.sort( lambda a, b: cmp(a[0], b[0]) )
+        return cls(parts, totcount)
+    from_string = classmethod(from_string)
+    
+    def __iter__(self):
+        for range in self.parts:
+            for i in range:
+                if 0 <= i < self.totcount:
+                    yield i
+    
+    def _next_or_none(iter):
+        try:
+            return iter.next()
+        except StopIteration:
+            return None
+    _next_or_none = staticmethod(_next_or_none)
+    
+    def inverse(self):
+        iter = self.__iter__()
+        item = PieceSelection._next_or_none(iter)
+        for i in xrange(self.totcount):
+            if i == item:
+                item = PieceSelection._next_or_none(iter)
+            else:
+                yield i
+     
+    def complete(self):
+        return self.all
+     
+    def apply(self, picker, storagewrapper):
+        if self.complete(): return
+        
+        for p in self.inverse(): picker.set_priority(p, -1)
+        blocked = [True] * self.totcount
+        for p in self: blocked[p] = False
+        storagewrapper.reblock(blocked)
+
+if __name__ == '__main__':
+    import sys
+    sel = PieceSelection.from_string(sys.argv[1], sys.argv[2], True)
+    for i in sel.inverse():
+        print i
diff -Naur bt-old/BitTornado-cvs/BitTornado/download_bt1.py BitTornado-cvs/BitTornado/download_bt1.py
--- bt-old/BitTornado-cvs/BitTornado/download_bt1.py	2006-12-23 12:48:24.000000000 -0500
+++ BitTornado-cvs/BitTornado/download_bt1.py	2007-03-08 03:17:13.000000000 -0500
@@ -3,6 +3,7 @@
 
 from zurllib import urlopen
 from urlparse import urlparse
+from PieceSelection import PieceSelection
 from BT1.btformats import check_message
 from BT1.Choker import Choker
 from BT1.Storage import Storage
@@ -165,6 +166,8 @@
         "minutes between automatic flushes to disk (0 = disabled)"),
     ('dedicated_seed_id', '',
         "code to send to tracker identifying as a dedicated seed"),
+    ('pieces', '-',
+        "selection of pieces to download"),
     ]
 
 argslistheader = 'Arguments are:\n\n'
@@ -606,6 +609,7 @@
         for i in xrange(self.len_pieces):
             if self.storagewrapper.do_I_have(i):
                 self.picker.complete(i)
+                
         self.upmeasure = Measure(self.config['max_rate_period'],
                             self.config['upload_rate_fudge'])
         self.downmeasure = Measure(self.config['max_rate_period'])
@@ -651,7 +655,10 @@
                 self.fileselector.set_priorities_now(self.priority)
             self.appdataobj.deleteTorrentData(self.infohash)
                                 # erase old data once you've started modifying it
-
+        
+        sel = PieceSelection.from_string(self.config['pieces'], self.len_pieces)
+        sel.apply(self.picker, self.storagewrapper)
+        
         if self.config['super_seeder']:
             self.set_super_seed()
 
diff -Naur bt-old/BitTornado-cvs/btshowmetainfo.py BitTornado-cvs/btshowmetainfo.py
--- bt-old/BitTornado-cvs/btshowmetainfo.py	2006-12-23 13:20:56.000000000 -0500
+++ BitTornado-cvs/btshowmetainfo.py	2007-03-09 23:26:05.000000000 -0500
@@ -8,6 +8,31 @@
 from os.path import *
 from sha import *
 from BitTornado.bencode import *
+from types import FloatType
+import re
+
+def hum(bytes, allow_decimals = True):
+	suf = ['', 'K', 'M', 'G'];
+	idx = 0
+	
+	while idx < len(suf) - 1: # Check if we want another suffix
+		if bytes % 1024 == 0:
+			bytes = bytes / 1024
+			idx += 1
+		elif allow_decimals and bytes / 1024 >= 10:
+			bytes = bytes / 1024.0
+			idx += 1
+		else:
+			break
+	
+	
+	if type(bytes) == FloatType:
+		fmt = "%.1f%s"
+	else:
+		fmt = "%d%s"
+	return fmt % (bytes, suf[idx])
+
+print hum(22222)
 
 NAME, EXT = splitext(basename(argv[0]))
 VERSION = '20030621'
@@ -46,12 +71,14 @@
                 if (path != ''):
                    path = path + "/"
                 path = path + item
-            print '   %s (%d)' % (path, file['length'])
+            print '   %s (%s)' % (path, hum(file['length']))
             file_length += file['length']
             name ='archive size..:'
     piece_number, last_piece_length = divmod(file_length, piece_length)
-    print '%s %i (%i * %i + %i)' \
-          % (name,file_length, piece_number, piece_length, last_piece_length)
+    print '%s %s (%i * %s + %s)' % (name, hum(file_length), piece_number,
+    	hum(piece_length), hum(last_piece_length))
+    print 'pieces........: %i' % (piece_number + 1)
+    print 'piece size....: %s' % hum(piece_length, False)
     print 'announce url..: %s' % metainfo['announce']
     if metainfo.has_key('announce-list'):
         list = []
